1. style conponent 만드는법.
const Box = styled.div`
	background-color: ${props => props.bgColor};
	width: 100px;
	height: 100px;
`;
2. conponent 사용법
<Box/>
3. style 중복처리 방법
const Circle = styled(Box)`
	border-radius: 50px;
`;
//Box의 style을 받을 수 있다.

4.conponent의 태그 속성 바꾸는법
<Box as='header'/>
//div태그인 Box conponent가 header로 바뀌었다.

5.conponent의 속성 추가 하는법
const Box = styled.div.attrs({required:true, minLength:5})`
	background-color: ${props => props.bgColor};
	width: 100px;
	height: 100px;
`;
// .attrs 를 붙이고 attrs({원하는 속성: 원하는 값 })

6. conponent가 일반 태그를 자식(만약 span이라면)으로 갖는 경우 자식을 스타일하는 방법
const Box=styled.div`
 width:200px;
 height:200px;
 span{
 font-size:56px;
}
`; 
7. 6의 경우에 hover같은 애니메이션 style을 추가로 붙이려면?
const Box=styled.div`
 width:200px;
 height:200px;
 span{
 font-size:56px;
 &:hover{
 font-size:100px;
 }
}
`; 
8. 6,7의 경우 특정 태그를 자식으로 같는 경우가 아닌 컴포넌트를 자식으로 갖는경우(spedo selector)

const Box = styled.div`
	width: 200px;
	height: 200px;
	background-color: tomato;
	animation: ${rotationAnimation} 1s linear infinite;
	align-items: center;
	justify-content: center;
	display: flex;
	${Emoji}:hover {
		font-size: 100px;
		color: white;
	}
`;
const Emoji = styled.span`
	font-size: 49px;
`;
//Emoji가 span으로 되어있긴하지만, 이거랑 하등관계없이 Emoji 라는 컴포넌트를 받으
면 hover 되게 되어 있다.
				<Box>
					<Emoji>●</Emoji>
				</Box>
				<Emoji>@</Emoji>
당연하게도. Box의 자식인 Emoji는 hover가 되고 자식이 아닌 Emoji는 hover되지 않는다.

9.Themes //모든 색을 다 넣어둔 object
import{ ThemeProvider} from styled-components;
<ThemeProvider/> 
ThemeProvider 속성 theme 으로 props가 가능함
예시로.
<ThemeProvider theme={darkTheme}
<App/>
</ThemeProvider theme>
App이 자식으로 존재하니 App은 props를 통해 프로퍼티를 가져올 수 있다.
const Title = styled.h1`
color: ${props => props.theme.textColor}
`;

10.props?
상위 컴포넌트에서 하위 컴포넌트로 데이터를 전달해주는 객체.
props.children이 역할을 수행한다.
const Book = (props) => {
  const { title, author, description } = props

  return (
    <article className="book">
      <h1>{title}</h1>
      <span>{author}</span>
      <p>{description}</p>
    </article>
  )
}
// 
export default Book

11.interface by TypeScript

-object shape(객체모양)을 TypeScript에게 타입이 뭔지 설명해주는
TypeScript의 개념이다. 

interface CircleProp {
	bgColor: string;
}
//bgColor 라는 건 string 타입이라는 뜻.

const Circle = (Circleobj: CircleProp)=> `${Circleobj.bgColor}`;
//Circle 변수에 Circleobj라는 값으로 표현하는데 표현의 타입은 CircleProp로부터 온다는 뜻.

12. default props and optional props
interface CircleProp {
	bgColor: string;
	borderColor?: string;
}
// bgColor 는 default로 반드시 있어야하는 default props 이고
// borderColor 는 ? 를 붙여서 optional props로 바뀌었다.

13.Type Script
자바스크립트는 타입에 대한 정의 존재 하지 않음
타입스크립트는 타입에 대한 정의가 존재.
언어 자체에 값이 어떤 것인지, 어떤 타입인지 검사해준다.
검사해서 실수가 있다면 코드가 멈춘다.
const plus = (a:number,b:number) => a+b;

function Dumy({text}) {
return <h1>{text}</h1>;
}
//dumy 함수를 만들면 속성값으로 text를 쓰기만 하면된다.

function App(){
 return(
 <Dumy text="hello"/>
)
}
//dumy 태그의 속성값으로 text를 hello로 썼다. 값은 잘 들어갔지만 dumy 의 text의 타입이 지정되질 않았다.

우리는 text의 타입을 알려줘야한다. 그래서 사용하는 것이 interface 이다.

interface dumyProps{
 text:string;
}
이렇게 만들어주고 
function Dumy({text}:dumyProps) {
return <h1>{text}</h1>;
}
이렇게 해주면 text의 타입이 string이라는 것을 알려준 것.
만약 interface에 추가로 

interface dumyProps{
 text:string;
 otherThing:string;
}

이렇게 생성해준다면.
function Dumy({text}:dumyProps) {
return <h1>{text}</h1>;
}
이곳에는 문제가 없지만, 
function App(){
 return(
 <dumy text="hello"/>
)
}
이곳에는  dumy에 otherThing의 속성이 없어서 prop를 보내지 않고 있어.
상관없게 해주려면 인터페이스에
interface dumyProps{
 text:string;
 otherThing?:boolean;
}
//?를 붙여서 상관없다는 것을 표시해주자.
추가로 
function Dumy({text, otherThing = false }:dumyProps) {
return <h1>{text}</h1>;
}
이걸 쓴 이유는 그냥 값을 인자안에서도 넣어줄 수 있다는 것을 표시하고 싶은거뿐임
역시나 Dumy뿐 아니라 그냥 App에서도 속성으로 true나 false 넣을 수 있음.

이제 온 클릭 같은 함수를 만들어볼 거임.
function App() {
 const OnClick = (e: React.FormEvent<HTMLButtonElement>) => {
console.log("hi)
e.preventDefault();
};
 return(
 <form>
 <Dumy text="hello"/>;
 <button onClick={Onclick}>click me </button>
</form>
);
}
//OnClick를 TypeScript로 만들었는데, 저거는 e(이벤트가)가 React의 Form 이벤트로 작용할 것이고
HTML의 버튼 요소를 사용할 것이다. 라는 거다.

