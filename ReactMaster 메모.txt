1. style conponent 만드는법.
const Box = styled.div`
	background-color: ${props => props.bgColor};
	width: 100px;
	height: 100px;
`;
2. conponent 사용법
<Box/>
3. style 중복처리 방법
const Circle = styled(Box)`
	border-radius: 50px;
`;
//Box의 style을 받을 수 있다.

4.conponent의 태그 속성 바꾸는법
<Box as='header'/>
//div태그인 Box conponent가 header로 바뀌었다.

5.conponent의 속성 추가 하는법
const Box = styled.div.attrs({required:true, minLength:5})`
	background-color: ${props => props.bgColor};
	width: 100px;
	height: 100px;
`;
// .attrs 를 붙이고 attrs({원하는 속성: 원하는 값 })

6. conponent가 일반 태그를 자식(만약 span이라면)으로 갖는 경우 자식을 스타일하는 방법
const Box=styled.div`
 width:200px;
 height:200px;
 span{
 font-size:56px;
}
`; 
7. 6의 경우에 hover같은 애니메이션 style을 추가로 붙이려면?
const Box=styled.div`
 width:200px;
 height:200px;
 span{
 font-size:56px;
 &:hover{
 font-size:100px;
 }
}
`; 
8. 6,7의 경우 특정 태그를 자식으로 같는 경우가 아닌 컴포넌트를 자식으로 갖는경우(spedo selector)

const Box = styled.div`
	width: 200px;
	height: 200px;
	background-color: tomato;
	animation: ${rotationAnimation} 1s linear infinite;
	align-items: center;
	justify-content: center;
	display: flex;
	${Emoji}:hover {
		font-size: 100px;
		color: white;
	}
`;
const Emoji = styled.span`
	font-size: 49px;
`;
//Emoji가 span으로 되어있긴하지만, 이거랑 하등관계없이 Emoji 라는 컴포넌트를 받으
면 hover 되게 되어 있다.
				<Box>
					<Emoji>●</Emoji>
				</Box>
				<Emoji>@</Emoji>
당연하게도. Box의 자식인 Emoji는 hover가 되고 자식이 아닌 Emoji는 hover되지 않는다.

9.Themes //모든 색을 다 넣어둔 object
import{ ThemeProvider} from styled-components;
<ThemeProvider/> 
ThemeProvider 속성 theme 으로 props가 가능함
예시로.
<ThemeProvider theme={darkTheme}
<App/>
</ThemeProvider theme>
App이 자식으로 존재하니 App은 props를 통해 프로퍼티를 가져올 수 있다.
const Title = styled.h1`
color: ${props => props.theme.textColor}
`;

10.props?
상위 컴포넌트에서 하위 컴포넌트로 데이터를 전달해주는 객체.
props.children이 역할을 수행한다.
const Book = (props) => {
  const { title, author, description } = props

  return (
    <article className="book">
      <h1>{title}</h1>
      <span>{author}</span>
      <p>{description}</p>
    </article>
  )
}
// 
export default Book

11.interface by TypeScript

-object shape(객체모양)을 TypeScript에게 타입이 뭔지 설명해주는
TypeScript의 개념이다. 

interface CircleProp {
	bgColor: string;
}
//bgColor 라는 건 string 타입이라는 뜻.

const Circle = (Circleobj: CircleProp)=> `${Circleobj.bgColor}`;
//Circle 변수에 Circleobj라는 값으로 표현하는데 표현의 타입은 CircleProp로부터 온다는 뜻.

