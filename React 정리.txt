React.js

React.js를 써야 하는 이유

React Js -> interactive 하게 만드는 library
React dom -> library, package, React element를
HTML에 두는 역할을 한다.

React.js 를 이용해서 addeventlistener이 아닌 객체 
안에 props를 넣어서 객체 자체가 interactive하게 만들 수 있다.

JSX-> JS을 확장 한 것인데, html과 유사하지만
React의 요소를 만드는 기능을 해준다.
BABEL-> JSX로 적은 코드를 브라우저가 이해할 수 있는
형태로 바꿔준다.

Props -> 일종의 방식이다. 부모컴포넌트로부터 자식 컴포넌트
에 데이터를 보낼 수 있게 해주는 방법.

Prop Types->React.js를 이용시에 제대로 된 데이터를 보냈는지
검사하기 위해 cdn방식으로 라이브러리를 설치하고
만약 내가 컴포넌트 이름이 Btn 이고 거기에 사용할
변수가 text 라고 하자 그리고 text에는 항상 string 이 오게
하고 싶으면

일단 
Btn.propTypes = {
	text:PropTypes.string.isRequired
}
로 설정하자. Btn을 제외한 나머지는 무조건 저렇게 써야한다.
propTypes라고 쓰고 text는 내가 이름 정한게 text니까 text
PropTypes를 사용할 것이고 거기에 string 거기에
isRequired 반드시 필수로 작성 되야 한다는 의미

Memo-> React.js에서 state 부분을 다시 리로딩을 하면
바뀌지 않는 부분도 리로딩을 하는데, 이를 방지하기위해

const 내가 쓸 변수명 = React.memo(컴포넌트이름);
을 하고
<내가 쓸 변수명 /> 을 하면 값이 변경 되지 않는 부분은
다시 리로딩 되지 않는 함수이다.

create-react-app 으로 작업할 때의 포인트는 "분활" ,"정복"
CSS modules!
이전에는 css를 class,id 이름을 외우고 css에 적용했다면
이제는 import styles from /'.css'; import를 하면
css에 여러가지 모듈로 적용시킬 수 있다.
<h1 className={styles.모듈이름}>Welcome<h1>

useState()-> 초기값을 인자로 넣어주면, State와 setState라는
두가지 요소를 배열 형태로 리턴해준다. 
(state명은 알맞게 설정하면 되고, 두 번째 요소에는 set을 붙임)
const[State, setState]= useState(초기값);

state가 변화 할때, 모든 code 들도 다시 실행 된다. (리로딩)
이것을 해결 해주는 함수는 useEffect
import { useEffect } from "react"; 을 한 후
useEffect(함수,[]); 를 하면 API를 딱 한 번만 호출하고
다시는 실행 되지 않는다.
useEffect는 두개의 인자를 갖는데,
1번째는 우리가 실행시키고 싶은 코드였고
2번째는 dependencies (dependencies란 react.js가 지켜보는것)
2번째 인자가 [] 인 경우는 지켜볼 대상이 없기에 1번만 실행된다
2번째 인자에 [keyword, counter] 같이 2개를 집어 넣을 수 있다
이 경우는 둘 중 하나라도 인식되면 반응한다.

CleanupFunction
useEffect의 확장인데, 첫번째 인자내에 return을 넣어주면
생성,삭제 같은 기능을 할 수 있다는 것이다.
어떻게 하냐면, useEffect( () => {}, []);
의 첫번째 인자에는 return을 두번째 인자에는 [] 빈 값을 넣어
1번만 실행되게 한다. 하지만 첫번째 인자에 return이 있으므로
가져오는 return을 리로딩을 하게 해준다. 그러면 그 리로딩이
된 것이 처음 나타내는 렌더링이라면, 수정 삭제가 가능하게
이루어지는 것이다.